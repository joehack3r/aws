{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "Ansible Control Machine for EC2-Classic",

	"Parameters" : {

		"HomeNetwork0CIDR" : {
			"Description" : " The IP address range, in CIDR format, that can be used to access the public subnet.",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},

		"AnsibleAMI" : {
			"Description" : "AMI for the Ansible server - typically latest Ubuntu LTS image identified from http://cloud.ubuntu.com/ami/",
			"Type" : "String",
			"AllowedPattern" : "ami-[0-9a-f]{8,8}"
		},

		"AnsibleInstanceType" : {
			"Description" : "EC2 instance type",
			"Type" : "String",
			"AllowedValues" : ["t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge","hi1.4xlarge"],
			"ConstraintDescription" : "Must be a valid EC2 instance type."
		},

		"AnsibleInstanceCountMin" : {
			"Description" : "Min size of instances in auto scaling group",
			"Type" : "String"
		},

		"AnsibleInstanceCountMax" : {
			"Description" : "Max size of instances in auto scaling group",
			"Type" : "String"
		},

		"AnsibleAvailabilityZone" : {
			"Description" : "Availability zones for the instances",
			"Type" : "String"
		},

		"BucketName" : {
			"Description" : "Name of bucket containing version controled files",
			"Type" : "String"
		},

		"KeyName" : {
			"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Type" : "String"
		}

	},

	"Resources" : {

		"AnsibleSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Access only from Home Network",
				"SecurityGroupIngress" : [{
					"IpProtocol" : "tcp",
					"FromPort" : "22",
					"ToPort" : "22",
					"CidrIp" : { "Ref" : "HomeNetwork0CIDR" }
				},{
					"IpProtocol" : "tcp",
					"FromPort" : "3389",
					"ToPort" : "3389",
					"CidrIp" : { "Ref" : "HomeNetwork0CIDR" }
				},{
					"IpProtocol" : "tcp",
					"FromPort" : "22",
					"ToPort" : "22",
					"CidrIp" : "255.255.255.255/32"
				},{
					"IpProtocol" : "tcp",
					"FromPort" : "3389",
					"ToPort" : "3389",
					"CidrIp" : "255.255.255.255/32"
				}]
			}
		},

		"AnsibleIngressFromSelfPort22": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {"Fn::GetAtt" : ["AnsibleSecurityGroup", "GroupId"]},
				"IpProtocol": "tcp",
				"FromPort": "22",
				"ToPort": "22",
				"SourceSecurityGroupName" : {"Ref" : "AnsibleSecurityGroup"}
			}
		},

		"AnsibleIngressFromSelfPort5986": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {"Fn::GetAtt" : ["AnsibleSecurityGroup", "GroupId"]},
				"IpProtocol": "tcp",
				"FromPort": "5986",
				"ToPort": "5986",
				"SourceSecurityGroupName" : {"Ref" : "AnsibleSecurityGroup"}
			}
		},

		"AnsibleRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/"
			}
		},

		"AnsibleRolePolicies": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "AnsibleControl",
				"PolicyDocument": {
					"Statement": [
						{
							"Action":[
								"*"
							],
							"Effect":"Allow",
							"Resource":[
								{ "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BucketName" } ]]},
								{ "Fn::Join" : ["", [ "arn:aws:s3:::", { "Ref" : "BucketName" }, "/*" ]]}
							]
						}
					]
				},
			"Roles": [
				{ "Ref": "AnsibleRole" }
			]
			}
		},

		"AnsibleInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{ "Ref": "AnsibleRole" }
				]
			}
		},

		"AnsibleWaitHandle" : {
			"Type" : "AWS::CloudFormation::WaitConditionHandle"
		},

		"CfnUser" : {
			"Type" : "AWS::IAM::User",
			"Properties" : {
				"Path": "/",
				"Policies": [{
					"PolicyName": "root",
					"PolicyDocument": { "Statement":[{
						"Effect":"Allow",
						"Action"	 : [
							"cloudformation:DescribeStacks",
							"cloudformation:DescribeStackResource",
							"s3:GetObject"
						],
						"Resource":"*"
					}]}
				}]
			}
		},

		"CfnKeys" : {
			"Type" : "AWS::IAM::AccessKey",
			"Properties" : {
				"UserName" : {"Ref": "CfnUser"}
			}
		},

		"AnsibleLaunchConfiguration": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata" : {
				"AWS::CloudFormation::Init" : {
					"config" : {
						"files" : {

							"/home/ubuntu/.ssh/ansible.pem" : {
								"source" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "BucketName" }, "/ssh_keys/ansible.pem"]]},
								"mode"   : "000600",
								"owner"  : "ubuntu",
								"group"  : "ubuntu"
							},

							"/home/ubuntu/hosts_for_ansible" : {
								"content" : { "Fn::Join" : ["", [
									"[local]\n",
									"127.0.0.1\n"
								]]},
								"mode" : "000600",
								"owner" : "ubuntu",
								"group" : "ubuntu"
							}
						}
					}
				},
				"AWS::CloudFormation::Authentication" : {
					"S3AccessCreds" : {
						"type" : "S3",
						"accessKeyId" : { "Ref" : "CfnKeys" },
						"secretKey" : {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"]},
						"buckets" : [ { "Ref" : "BucketName" } ]
					}
				}
			},
			"Properties": {
				"IamInstanceProfile": { "Ref": "AnsibleInstanceProfile" },
				"ImageId": { "Ref" : "AnsibleAMI" },
				"InstanceType": { "Ref": "AnsibleInstanceType" },
				"KeyName": { "Ref": "KeyName" },
				"InstanceMonitoring": "false",
				"SecurityGroups": [ { "Ref": "AnsibleSecurityGroup" } ],
				"UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash -v\n",

					"# Helper function\n",
					"function error_exit\n",
					"{\n",
					"  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "AnsibleWaitHandle" }, "'\n",
					"  exit 1\n",
					"}\n",

					"#Some pre-Ansible steps\n",
					"apt-get update\n",
					"apt-get -y upgrade\n",
					"apt-get -y install git python-dev python-setuptools build-essential\n",
					"easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
					"easy_install pip\n",
					"pip install setuptools --no-use-wheel --upgrade\n",

					"# Recent change causes the master branch to no longer work with Ansible\n",
					"# sudo pip install http://github.com/diyan/pywinrm/archive/master.zip#egg=pywinrm\n",
					"# So using this one\n",
					"sudo pip install https://github.com/diyan/pywinrm/archive/0.0.2dev.zip\n",

					"#Run cfn-init - to get files like the ansible.pem\n",
					"cfn-init --region ", { "Ref" : "AWS::Region" },
					"    -s ", { "Ref" : "AWS::StackId" }, " -r AnsibleLaunchConfiguration ",
					"         --access-key ", { "Ref" : "CfnKeys" },
					"         --secret-key ", {"Fn::GetAtt": ["CfnKeys", "SecretAccessKey"]}, " || error_exit 'Failed to run cfn-init'\n",

					"#Ansible steps\n",
					"pip install paramiko PyYAML jinja2 boto --upgrade\n",
					"#Installing released Ansible\n",
					"pip install ansible\n",
					"echo '#Start ssh-agent at login (for Ansible)' >> /home/ubuntu/.bashrc\n",
					"echo 'SSHAGENT=/usr/bin/ssh-agent' >> /home/ubuntu/.bashrc\n",
					"echo 'SSHAGENTARGS=\"-s\"' >> /home/ubuntu/.bashrc\n",
					"echo 'if [ -z \"$SSH_AUTH_SOCK\" -a -x \"$SSHAGENT\" ]; then ' >> /home/ubuntu/.bashrc\n",
					"echo '  eval `$SSHAGENT $SSHAGENTARGS` ' >> /home/ubuntu/.bashrc\n",
					"echo '  trap \"kill $SSH_AGENT_PID\" 0 ' >> /home/ubuntu/.bashrc\n",
					"echo 'fi ' >> /home/ubuntu/.bashrc\n",
					"echo 'ssh-add /home/ubuntu/.ssh/ansible.pem' >> /home/ubuntu/.bashrc\n",
					"echo 'export ANSIBLE_HOSTS=/home/ubuntu/hosts_for_ansible' >> /home/ubuntu/.bashrc\n",

					"#Installing development Ansible\n",
					"cd /home/ubuntu\n",
					"/usr/bin/git clone git://github.com/ansible/ansible.git\n",

					"echo '[defaults]' > /home/ubuntu/.ansible.cfg\n",
					"echo 'host_key_checking=False' >> /home/ubuntu/.ansible.cfg\n",

					"echo 'echo \"To run the development branch of Ansible:\"' >> /home/ubuntu/.bashrc\n",
					"echo 'echo \"source /home/ubuntu/ansible/hacking/env-setup\"' >> /home/ubuntu/.bashrc\n",

					"# All is well so signal success\n",
					"cfn-signal -e 0 -r \"Ansible instance setup complete\" '", { "Ref" : "AnsibleWaitHandle" }, "'\n",

					"# And do a quick reboot since an apt-get upgrade was performed\n",
					"/bin/sleep 5\n",
					"/sbin/init 6\n"

				]]}}
			}
		},

		"AnsibleScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Version": "2009-05-15",
			"Properties": {
				"AvailabilityZones": [{ "Ref" : "AnsibleAvailabilityZone" }],
				"LaunchConfigurationName": { "Ref": "AnsibleLaunchConfiguration" },
				"MinSize": { "Ref" : "AnsibleInstanceCountMin"},
				"MaxSize": { "Ref" : "AnsibleInstanceCountMax"},
				"Tags": [
						{ "Key" : "Name",        "Value" : "ansible-control", "PropagateAtLaunch" : "true" },
						{ "Key" : "environment", "Value" : "all",             "PropagateAtLaunch" : "true" },
						{ "Key" : "product",     "Value" : "ansible",         "PropagateAtLaunch" : "true" },
						{ "Key" : "role",        "Value" : "ansible",         "PropagateAtLaunch" : "true" },
						{ "Key" : "owner",       "Value" : "JoeHack3r",       "PropagateAtLaunch" : "true" }
				]
			}
		},
		
		"AnsibleWaitCondition" : {
			"Type" : "AWS::CloudFormation::WaitCondition",
			"DependsOn" : "AnsibleScalingGroup",
			"Properties" : {
				"Handle" : {"Ref" : "AnsibleWaitHandle"},
				"Timeout" : "1800"
			}
		}
	},

	"Outputs" : {
		"BlankSpace" : {
			"Value" : "Empty space",
			"Description" : "Empty space so easier to copy other outputs."
		}
	}
}